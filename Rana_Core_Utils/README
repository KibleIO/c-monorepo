Some things here:

the idl directory is a sub module of KibleIO/Gaia
in order to make everything please first generate the protobuf files
- make build_proto

also install rename

apt install rename

git submodule update --init --recursive
git submodule foreach git pull origin master

mac osx:

https://brew.sh/

https://stackoverflow.com/questions/64951024/how-can-i-run-two-isolated-installations-of-homebrew

https://github.com/json-c/json-c
https://grpc.io/docs/languages/cpp/quickstart/
brew install rename
brew install ffmpeg

SWITCH BETWEEM x86 and ARM

arch -x86_64 zsh
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

export PATH=$PATH:/mingw64/bin
export PATH=$PATH:/usr/local/lib
export PATH=$PATH:/mingw64/bin/

https://community.letsencrypt.org/t/certbot-command-you-use-to-renew-or-generate-cert-by-passing-my-own-csr/124666

curl -X POST "https://elk.kible.com:9200/_security/user/poster?pretty" -H 'Content-Type: application/json' -u elastic -d'{ "password" : "l0ng-r4nd0m-p@ssw0rd", "roles" : [ "create_doc" ] }'


package main

import (
	"log"
	"net"

	"google.golang.org/grpc"

	"golang.org/x/net/context"
	pb "kible.io/gaia"
)

// the most dull service in existence
type aergiaServer struct {
	pb.UnimplementedAERGIAServer
}

const (
	//grpcListen = "api.kible.com:61942"
	grpcListen = "45.57.227.210:62942"
)

func main() {
	server := &aergiaServer{}

	//finish setting up grpc
	lis, err := net.Listen("tcp", grpcListen)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
		return
	}

	grpcServer := grpc.NewServer()
	pb.RegisterAERGIAServer(grpcServer, server)
	grpcServer.Serve(lis)
}

func (s *aergiaServer) Ping(ctx context.Context, ping *pb.Empty) (*pb.Empty, error) {
	return &pb.Empty{}, nil
}

build_aergia_docker_10:
	docker run --platform linux/amd64 --pull=always --rm -it -v `pwd`:/root/code kible/golang:deb10 make build_aergia

build_aergia:
	PATH=$(PATH):/usr/local/go/bin go build -o aergia/aergia ./aergia/...

src/kible.io/aergia/aergia

syntax = "proto3";

package gaia;

option go_package = "kible.io/gaia";

import "universal.proto";

// the most dull service in existence
service AERGIA {
	rpc Ping (Empty) returns (Empty) {}
}
